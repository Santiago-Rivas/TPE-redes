networks:
  monitoring:
    driver: bridge

volumes:
  grafana_data_real: {}  # Volumen para persistir datos de Grafana
  prometheus_data: {}  # Opcional: para persistir datos de Prometheus tambiÃ©n
  dashboard_data: {}
  redis_data: {}

services:
  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=mailhog:1025  # Point Grafana to MailHog SMTP
      - GF_SMTP_USER=
      - GF_SMTP_PASSWORD=
      - GF_SMTP_FROM_ADDRESS=grafana@example.com
      - GF_SMTP_FROM_NAME=Grafana Alerts
      - GF_SMTP_SKIP_VERIFY=true
    volumes:
      - grafana_data_real:/var/lib/grafana  # Persistencia de datos de Grafana
    networks:
      - monitoring

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "8025:8025"  # Web UI for viewing emails
      - "1025:1025"  # SMTP port for sending emails
    networks:
      - monitoring

  mailhog-exporter:
    build:
      context: ./mailhog_exporter
      dockerfile: Dockerfile  # We'll create a Dockerfile to run the Python script
    container_name: mailhog-exporter
    ports:
      - "9114:9114"  # Expose the exporter metrics on port 9114
    environment:
      - MAILHOG_API_URL=http://mailhog:8025/api/v2  # API endpoint for MailHog's HTTP API
    networks:
      - monitoring
    depends_on:
      - mailhog

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Persistencia de datos de Prometheus (opcional)
    networks:
      - monitoring

  # Node Exporter for host1
  host1-node-exporter:
    image: prom/node-exporter
    container_name: host1-node-exporter
    ports:
      - "9101:9100"
    networks:
      - monitoring

  # Node Exporter for host2
  host2-node-exporter:
    image: prom/node-exporter
    container_name: host2-node-exporter
    ports:
      - "9102:9100"
    networks:
      - monitoring

  # Node Exporter for host3
  host3-node-exporter:
    image: prom/node-exporter
    container_name: host3-node-exporter
    ports:
      - "9103:9100"
    networks:
      - monitoring

  # Node Exporter for host4
  host4-node-exporter:
    image: prom/node-exporter
    container_name: host4-node-exporter
    ports:
      - "9104:9100"
    networks:
      - monitoring

  # Blackbox Exporter
  blackbox-exporter:
    image: prom/blackbox-exporter
    container_name: blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - monitoring

  # Simulated Web Server (host 2)
  web-service:
    image: nginxdemos/hello
    container_name: web-service
    ports:
      - "8080:80"
    networks:
      - monitoring

  # Simulated API Service (host 3)
  api-service:
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.8
    container_name: api-service
    environment:
      - MODULE_NAME=main
    volumes:
      - ./api:/app
    ports:
      - "8001:80"
    networks:
      - monitoring
    command: >
      /bin/bash -c "pip install redis && uvicorn main:app --host 0.0.0.0 --port 80"

  nginx-dashboard:
    image: nginx:latest
    container_name: nginx-dashboard
    ports:
      - "8081:80"  # Expose the dashboard on http://localhost:8081
    volumes:
      - ./dashboard/index.html:/usr/share/nginx/html/index.html:ro  # Mount HTML file
    networks:
      - monitoring
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"  # Expose Redis on the default port
    volumes:
      - redis_data:/data  # Persist Redis data if needed
    networks:
      - monitoring


  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"  # Expose Redis metrics on this port
    networks:
      - monitoring
    depends_on:
      - redis
